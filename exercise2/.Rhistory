beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
beta.hat
# 計算與比較差異
x_difference <- beta.hat - beta
x_difference
# 3. 引入 CO2 資料表的資料
X <- model.matrix(~ Type + Treatment + conc, CO2)
X
#' 我們以 uptake 的值放入 y 之中，作為迴歸的目標
y <- CO2$uptake
y
co2_beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
co2_beta.hat
y.hat <- X %*% co2_beta.hat
y.hat
# 5. 計算 correlation
my.corr <- cor(X %*% co2_beta.hat, y)
my.corr
# 6. 用 lm() 函數進行線性迴歸
g <- lm(uptake ~ Type + Treatment + conc, CO2)
g.s <- summary(g)
g.s$r.squared
# 提取 g.s 中的 R-squared 值
R_squared_lm <- g.s$r.squared
R_squared_lm
# 計算 my.corr^2 的值
R_squared_calculated <- drop(my.corr^2)
R_squared_calculated
# 比較兩者 提示可以使用 identical() 函數，然後取相同的 round ，例如 round(x, 10)
decimal_places <- 10
x_rounded <- round(R_squared_lm, decimal_places)
y_rounded <- round(R_squared_calculated, decimal_places)
comparison <- identical(x_rounded, y_rounded)
comparison
comparison
vignette(package = "dplyr")
vignette("introduction", package = "dplyr")
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
install.packages("dplyr")
library(dplyr)
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6, ]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
#請各位同學撈出資料表中班機編號 (tailnum) 以 "AA" 開頭的班機資料
flights_AA_dplyr <- filter(flights, grepl("^AA", tailnum))
flights_AA_baseR <- flights[grepl("^AA", flights$tailnum), ]
# 請練習以 dplyr 語法以及 baseR 語法取出 flights 資料表中奇數列的資料
flights_odd_rows_dplyr <- slice(flights, seq(1, nrow(flights), 2))
flights_odd_rows_baseR <- flights[seq(1, nrow(flights), 2), ]
# 請練習以 dplyr 語法以集 baseR 語法取出 flights 資料表中 1000 到 2000 列 以及 2500 到 3500 列的資料
flights_selected_rows_baseR <- slice(flights, c(1000:2000, 2500:3500))
# 請參閱 arrange 與 order 的 help，試著由大至小進行排序
# 使用 dplyr
flights_sorted_dplyr <- arrange(flights, desc(month), desc(day), desc(dep_time))
# 使用 base R
flights_sorted_baseR <- flights[order(flights$month, flights$day, flights$dep_time, decreasing = TRUE), ]
# 上述資料中第一列的 dep_time 為 517
# 代表了 1 月 1 日 當天最早的班機是 5:17 起飛的
# 那麼整個紀錄中起飛時刻最早是幾點呢？
earliest_arr_time <- min(flights$arr_time, na.rm = TRUE)
# 以 %>% 指令改寫 group_by, summarise 流程會十分簡單
# 這邊我們做一個練習，請問美國航空公司 (carrier == "AA")，其班機尾標是否都有 AA 字眼，去掉 na
all_AA_tailnums <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
summarise(all_aa = all(grepl("^AA", tailnum, ignore.case = TRUE)))
# 定義時段
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarise(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
stopifnot(nrow(flights_AA_dplyr)==32645)
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
rm(list = ls())
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
install.packages("dplyr")
library(dplyr)
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
#請各位同學撈出資料表中班機編號 (tailnum) 以 "AA" 開頭的班機資料
flights_AA_dplyr <- filter(flights, grepl("AA", tailnum))
flights_AA_baseR <- flights[grepl("AA", flights$tailnum),]
# 請練習以 dplyr 語法以及 baseR 語法取出 flights 資料表中奇數列的資料
flights_odd_rows_dplyr <- slice(flights, seq(1, nrow(flights), 2))
flights_odd_rows_baseR <- flights[seq(1,nrow(flights),2),]
# 請練習以 dplyr 語法以集 baseR 語法取出 flights 資料表中 1000 到 2000 列 以及 2500 到 3500 列的資料
flights_selected_rows_baseR <- slice(flights, 1000:2000, 2500:3500)
# # 請參閱 arrange 與 order 的 help，試著由大至小進行排序
# 使用 dplyr
flights_sorted_dplyr <- arrange(flights, desc(month), desc(day), desc(dep_time))
# 使用 base R
flights_sorted_baseR <- with(flights, flights[order(desc(month), desc(day), desc(dep_time)),])
# 上述資料中第一列的 dep_time 為 517
# 代表了 1 月 1 日 當天最早的班機是 5:17 起飛的
# 那麼整個紀錄中起飛時刻最早是幾點呢？
earliest_arr_time <- flights$arr_time[min(flights$arr_time, na.rm = TRUE)]
# 以 %>% 指令改寫 group_by, summarise 流程會十分簡單
# 這邊我們做一個練習，請問美國航空公司 (carrier == "AA")，其班機尾標是否都有 AA 字眼，去掉 na
all_AA_tailnums <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
select(tailnum) %>%
summarise(all_aa = all(grepl("AA", tailnum, ignore.case = TRUE)))
library(dplyr)
library(nycflights13)
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
stopifnot(nrow(flights_AA_dplyr)==32645)
stopifnot(nrow(flights_AA_baseR)==32645)
stopifnot(nrow(flights_odd_rows_dplyr)==168388)
stopifnot(nrow(flights_odd_rows_baseR)==168388)
stopifnot(nrow(flights_selected_rows_baseR)==2002)
stopifnot(nrow(flights_sorted_dplyr)==336776)
stopifnot(nrow(flights_sorted_baseR)==336776)
stopifnot(earliest_arr_time==830)
stopifnot(all_AA_tailnums==TRUE)
stopifnot(average_delays$dep_delay[1]==139.838709677419)
stopifnot(average_delays$arr_delay[1]==129.5161290322581)
stopifnot(average_delays$dep_delay[1]==139.838709677419)
average_delays$dep_delay[1]
average_delays$arr_delay[1]
average_delays$dep_delay[1]
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(sched_dep_delay), arr_delay = mean(sched_arr_delay))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(sched_dep_delay), arr_delay = mean(sched_arr_delay))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(sched_dep_time), arr_delay = mean(sched_arr_time))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
stopifnot(nrow(flights_AA_dplyr)==32645)
stopifnot(nrow(flights_AA_baseR)==32645)
stopifnot(nrow(flights_odd_rows_dplyr)==168388)
stopifnot(nrow(flights_odd_rows_baseR)==168388)
stopifnot(nrow(flights_selected_rows_baseR)==2002)
stopifnot(nrow(flights_sorted_dplyr)==336776)
stopifnot(nrow(flights_sorted_baseR)==336776)
stopifnot(earliest_arr_time==830)
stopifnot(all_AA_tailnums==TRUE)
stopifnot(average_delays$dep_delay[1]==139.838709677419)
stopifnot(average_delays$arr_delay[1]==129.5161290322581)
average_delays$dep_delay[1]
average_delays$arr_delay[1]
average_delays$arr_delay
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
#請各位同學撈出資料表中班機編號 (tailnum) 以 "AA" 開頭的班機資料
flights_AA_dplyr <- filter(flights, grepl("AA", tailnum))
flights_AA_baseR <- flights[grepl("AA", flights$tailnum),]
# 請練習以 dplyr 語法以及 baseR 語法取出 flights 資料表中奇數列的資料
flights_odd_rows_dplyr <- slice(flights, seq(1, nrow(flights), 2))
flights_odd_rows_baseR <- flights[seq(1,nrow(flights),2),]
# 請練習以 dplyr 語法以集 baseR 語法取出 flights 資料表中 1000 到 2000 列 以及 2500 到 3500 列的資料
flights_selected_rows_baseR <- slice(flights, 1000:2000, 2500:3500)
# # 請參閱 arrange 與 order 的 help，試著由大至小進行排序
# 使用 dplyr
flights_sorted_dplyr <- arrange(flights, desc(month), desc(day), desc(dep_time))
# 使用 base R
flights_sorted_baseR <- with(flights, flights[order(desc(month), desc(day), desc(dep_time)),])
# 上述資料中第一列的 dep_time 為 517
# 代表了 1 月 1 日 當天最早的班機是 5:17 起飛的
# 那麼整個紀錄中起飛時刻最早是幾點呢？
earliest_arr_time <- flights$arr_time[min(flights$arr_time, na.rm = TRUE)]
# 以 %>% 指令改寫 group_by, summarise 流程會十分簡單
# 這邊我們做一個練習，請問美國航空公司 (carrier == "AA")，其班機尾標是否都有 AA 字眼，去掉 na
all_AA_tailnums <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
select(tailnum) %>%
summarise(all_aa = all(grepl("AA", tailnum, ignore.case = TRUE)))
library(dplyr)
library(nycflights13)
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
stopifnot(nrow(flights_AA_dplyr)==32645)
stopifnot(nrow(flights_AA_baseR)==32645)
stopifnot(nrow(flights_odd_rows_dplyr)==168388)
stopifnot(nrow(flights_odd_rows_baseR)==168388)
stopifnot(nrow(flights_selected_rows_baseR)==2002)
stopifnot(nrow(flights_sorted_dplyr)==336776)
stopifnot(nrow(flights_sorted_baseR)==336776)
stopifnot(earliest_arr_time==830)
stopifnot(all_AA_tailnums==TRUE)
stopifnot(average_delays$dep_delay[1]==139.838709677419)
rm(list = ls())
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
install.packages("dplyr")
library(dplyr)
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
#請各位同學撈出資料表中班機編號 (tailnum) 以 "AA" 開頭的班機資料
flights_AA_dplyr <- filter(flights, grepl("AA", tailnum))
flights_AA_baseR <- flights[grepl("AA", flights$tailnum),]
# 請練習以 dplyr 語法以及 baseR 語法取出 flights 資料表中奇數列的資料
flights_odd_rows_dplyr <- slice(flights, seq(1, nrow(flights), 2))
flights_odd_rows_baseR <- flights[seq(1,nrow(flights),2),]
# 請練習以 dplyr 語法以集 baseR 語法取出 flights 資料表中 1000 到 2000 列 以及 2500 到 3500 列的資料
flights_selected_rows_baseR <- slice(flights, 1000:2000, 2500:3500)
# # 請參閱 arrange 與 order 的 help，試著由大至小進行排序
# 使用 dplyr
flights_sorted_dplyr <- arrange(flights, desc(month), desc(day), desc(dep_time))
# 使用 base R
flights_sorted_baseR <- with(flights, flights[order(desc(month), desc(day), desc(dep_time)),])
# 上述資料中第一列的 dep_time 為 517
# 代表了 1 月 1 日 當天最早的班機是 5:17 起飛的
# 那麼整個紀錄中起飛時刻最早是幾點呢？
earliest_arr_time <- flights$arr_time[min(flights$arr_time, na.rm = TRUE)]
# 以 %>% 指令改寫 group_by, summarise 流程會十分簡單
# 這邊我們做一個練習，請問美國航空公司 (carrier == "AA")，其班機尾標是否都有 AA 字眼，去掉 na
all_AA_tailnums <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
select(tailnum) %>%
summarise(all_aa = all(grepl("AA", tailnum, ignore.case = TRUE)))
library(dplyr)
library(nycflights13)
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
stopifnot(nrow(flights_AA_dplyr)==32645)
stopifnot(nrow(flights_AA_baseR)==32645)
stopifnot(nrow(flights_odd_rows_dplyr)==168388)
stopifnot(nrow(flights_odd_rows_baseR)==168388)
stopifnot(nrow(flights_selected_rows_baseR)==2002)
stopifnot(nrow(flights_sorted_dplyr)==336776)
stopifnot(nrow(flights_sorted_baseR)==336776)
stopifnot(earliest_arr_time==830)
stopifnot(all_AA_tailnums==TRUE)
stopifnot(average_delays$dep_delay[1]==139.838709677419)
stopifnot(average_delays$arr_delay[1]==129.5161290322581)
average_delays$dep_delay[1]
setwd("~/Downloads")
setwd("~/Desktop/資料科學實務/exercise1/")
gdp <- read.csv("GDP.txt")
gdp <- data.frame(gdp[4:135, 1:2])
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- gsub(pattern = ",", replacement = "", x = gdp$gdp)
gdp$gdp <- as.numeric(gdp$gdp, na.rm = TRUE)
gg <- NULL
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
nrow(gdp)
View(gdp)
#' 請用學到的方法讀取 GDP.csv 的資料、整理資料，並把最後的結果存到變數`gdp`。
#' 提示：GDP.csv 中的第一欄數據是年/季、第二欄數據是該季的GDP(百萬)。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是我國每年的GDP，
#' 具體細節請參考最後的`stopifnot`的檢查事項。
#' 提示：拿掉數據中間的逗號，請用：`gsub(pattern = ",", replacement = "", x = <你的字串向量>)`
gdp <- read.csv("GDP.txt")
gdp <- data.frame(gdp[4:135, 1:2])
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- gsub(pattern = ",", replacement = "", x = gdp$gdp)
gdp$gdp <- as.numeric(gdp$gdp, na.rm = TRUE)
gdp$year <- substr(gdp$year,1,4)
#' 請用學到的方法讀取 GDP.csv 的資料、整理資料，並把最後的結果存到變數`gdp`。
#' 提示：GDP.csv 中的第一欄數據是年/季、第二欄數據是該季的GDP(百萬)。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是我國每年的GDP，
#' 具體細節請參考最後的`stopifnot`的檢查事項。
#' 提示：拿掉數據中間的逗號，請用：`gsub(pattern = ",", replacement = "", x = <你的字串向量>)`
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
gdp <- read.csv("GDP.txt")
gdp <- data.frame(gdp[4:135, 1:2])
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- gsub(pattern = ",", replacement = "", x = gdp$gdp)
gdp$gdp <- as.numeric(gdp$gdp, na.rm = TRUE)
gdp$year <- substr(gdp$year,1,4)
gdp
gdp %>%
group_by(gdp$year) %>%
summarise(gdp = sum(gdp))
gdp %>%
group_by(year) %>%
summarise(gdp = sum(gdp))
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
nrow(gdp)
gdp %>%
group_by(year) %>%
summarise(gdp = sum(gdp)) -> gdp
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
stopifnot(range(gdp$year) == c("1981", "2013"))
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
gdp$gdp <- gdp$gdp * 1000000
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
gdp <- read.csv("GDP.txt")
gdp <- data.frame(gdp[4:135, 1:2])
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- gsub(pattern = ",", replacement = "", x = gdp$gdp)
gdp$gdp <- as.numeric(gdp$gdp, na.rm = TRUE)
gdp$year <- substr(gdp$year,1,4)
gdp %>%
group_by(year) %>%
summarise(gdp = sum(gdp)) -> gdp
gdp$gdp <- gdp$gdp * 1000000
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
stopifnot(range(gdp$year) == c("1981", "2013"))
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
#' cl_info_other.csv 的資料包含各家銀行的房貸餘額 (mortgage_bal) 資訊與資料建立的時間 (data_dt)。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至 cl_info_year
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值 (請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info_year <- read.csv("cl_info_other.csv")
cl_info_year <- data.frame(cl_info_year)
yy <- unique(substring(cl_info_year$data_dt, 1, 4))
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
cl_info_year$data_dt <- substring(cl_info_year$data_dt, 1, 10)
cl_info_year$data_dt <- gsub(pattern = "-", replacement = "", x = cl_info_year$data_dt)
cl_info_year$data_dt <- as.numeric(cl_info_year$data_dt)
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
stopifnot(class(cl_info_year$year) == "character")
#' cl_info_other.csv 的資料包含各家銀行的房貸餘額 (mortgage_bal) 資訊與資料建立的時間 (data_dt)。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至 cl_info_year
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值 (請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info_year <- read.csv("cl_info_other.csv")
View(cl_info_year)
cl_info_year <- read.csv("cl_info_other.csv")
cl_info_year <- data.frame(cl_info_year)
yy <- unique(substring(cl_info_year$data_dt, 1, 4))
cl_info_year$data_dt <- substring(cl_info_year$data_dt, 1, 10)
cl_info_year$data_dt <- gsub(pattern = "-", replacement = "", x = cl_info_year$data_dt)
cl_info_year$data_dt <- as.numeric(cl_info_year$data_dt)
mm <- c(0, 0, 0, 0, 0, 0, 0, 0, 0)
for(i in 1:length(cl_info_year$data_dt)){
if(cl_info_year$data_dt[i]%%10000==101){
mm[(cl_info_year$data_dt[i]/10000)-2005]<- mm[(cl_info_year$data_dt[i]/10000)-2005]+cl_info_year$mortgage_bal[i]
}
}
cl_info_year <- data.frame(year=yy, mortgage_total_bal=mm)
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
stopifnot(class(cl_info_year$year) == "character")
stopifnot(class(cl_info_year$mortgage_total_bal) == "numeric")
stopifnot(nrow(cl_info_year) == 9)
stopifnot(range(cl_info_year$year) == c("2006", "2014"))
stopifnot(range(cl_info_year$mortgage_total_bal) == c(3.79632e+12, 5.726784e+12))
mortgage2gdp <- NULL
stopifnot(is.data.frame(mortgage2gdp))
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
stopifnot(class(cl_info_year$year) == "character")
stopifnot(class(cl_info_year$mortgage_total_bal) == "numeric")
stopifnot(nrow(cl_info_year) == 9)
stopifnot(range(cl_info_year$year) == c("2006", "2014"))
stopifnot(range(cl_info_year$mortgage_total_bal) == c(3.79632e+12, 5.726784e+12))
mortgage2gdp <- NULL
gdp %>%
left_join(cl_info_year) %>%
filter(!is.na(mortgage_total_bal)) ->ans
ans <- mutate(ans, index=(mortgage_total_bal/gdp))
ans %>%
select(year, index) -> mortgage2gdp
stopifnot(is.data.frame(mortgage2gdp))
stopifnot(nrow(mortgage2gdp) == 8)
stopifnot(colnames(mortgage2gdp) == c("year", "index"))
stopifnot(class(mortgage2gdp$year) == "character")
stopifnot(class(mortgage2gdp$index) == "numeric")
stopifnot(min(mortgage2gdp$index) > 0.3)
stopifnot(max(mortgage2gdp$index) < 0.4)
rm(list = ls())
gdp <- read.csv("GDP.txt")
gdp <- data.frame(gdp[4:135, 1:2])
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- gsub(pattern = ",", replacement = "", x = gdp$gdp)
gdp$gdp <- as.numeric(gdp$gdp, na.rm = TRUE)
gdp$year <- substr(gdp$year,1,4)
gdp %>%
group_by(year) %>%
summarise(gdp = sum(gdp)) -> gdp
gdp$gdp <- gdp$gdp * 1000000
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
stopifnot(range(gdp$year) == c("1981", "2013"))
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
cl_info_year <- read.csv("cl_info_other.csv")
cl_info_year <- data.frame(cl_info_year)
yy <- unique(substring(cl_info_year$data_dt, 1, 4))
cl_info_year$data_dt <- substring(cl_info_year$data_dt, 1, 10)
cl_info_year$data_dt <- gsub(pattern = "-", replacement = "", x = cl_info_year$data_dt)
cl_info_year$data_dt <- as.numeric(cl_info_year$data_dt)
mm <- c(0, 0, 0, 0, 0, 0, 0, 0, 0)
for(i in 1:length(cl_info_year$data_dt)){
if(cl_info_year$data_dt[i]%%10000==101){
mm[(cl_info_year$data_dt[i]/10000)-2005]<- mm[(cl_info_year$data_dt[i]/10000)-2005]+cl_info_year$mortgage_bal[i]
}
}
cl_info_year <- data.frame(year=yy, mortgage_total_bal=mm)
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
stopifnot(class(cl_info_year$year) == "character")
stopifnot(class(cl_info_year$mortgage_total_bal) == "numeric")
stopifnot(nrow(cl_info_year) == 9)
stopifnot(range(cl_info_year$year) == c("2006", "2014"))
stopifnot(range(cl_info_year$mortgage_total_bal) == c(3.79632e+12, 5.726784e+12))
gdp %>%
left_join(cl_info_year) %>%
filter(!is.na(mortgage_total_bal)) ->ans
res <- mutate(res, index=(mortgage_total_bal/gdp))
res <- mutate(res, index=(mortgage_total_bal/gdp))
gdp %>%
left_join(cl_info_year) %>%
filter(!is.na(mortgage_total_bal)) ->res
res <- mutate(res, index=(mortgage_total_bal/gdp))
res %>%
select(year, index) -> mortgage2gdp
stopifnot(is.data.frame(mortgage2gdp))
stopifnot(nrow(mortgage2gdp) == 8)
stopifnot(colnames(mortgage2gdp) == c("year", "index"))
stopifnot(class(mortgage2gdp$year) == "character")
stopifnot(class(mortgage2gdp$index) == "numeric")
stopifnot(min(mortgage2gdp$index) > 0.3)
stopifnot(max(mortgage2gdp$index) < 0.4)
setwd("~/Desktop/資料科學實務/exercise2")
hsb <- read.csv("hsb.csv", fileEncoding = "UTF-16BE",sep=",", head = TRUE, skip = 1)
hsb %>%
#filter(閱讀 == -99 | 寫作 == -99 | 數學 == -99 | 科學 == -99 | 社會科學 == -99) -> test
filter(!(寫作 == -99)) -> hsb.new
# 請分別計算 hsb.new 資料表中男生與女生的各科平均，並且將其整理成一個 data.frame 指入 hsb.split 變數
filter(hsb.new, 性別 ==  "male") -> Male
filter(hsb.new, 性別 ==  "female") -> Female
hsb.new %>%
group_by(性別) %>%
summarize(閱讀平均 = mean(閱讀, na.rm = TRUE),
寫作平均 = mean(寫作, na.rm = TRUE),
數學平均 = mean(數學, na.rm = TRUE),
科學平均 = mean(科學, na.rm = TRUE),
社會科學平均 = mean(社會科學, na.rm = TRUE)) -> hsb.split
stopifnot(isTRUE(all.equal(colnames(hsb.split), c("性別","閱讀平均","寫作平均","數學平均","科學平均","社會科學平均"))))
# 除去編號與分類別，請嘗試以 "性別"、"種族"、"學校類型"、"學程類型"、"閱讀"、"數學"、"科學"、"社會科學" 等項建立線性模型預測寫作成績，並將建立出來模型的 R.square 值，存入變數 R2 中
# 提示：以 lm 建立線性模型，字串類別的資料須先轉換成為 R 認可的類別型資料
# 提示： summary 建好的模型可以獲得 R.square 值，可用 str 指令觀察該如何取出
g <- lm(寫作~性別+種族+學校類型+學程類型+閱讀+數學+科學+社會科學, hsb.new)
R2 <- summary(g)$r.squared
?predict
?predict.lm
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
predict(lm, newdata: hsb %>% filter(寫作 == -99))
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
predict.lm(lm, newdata: hsb %>% filter(寫作 == -99))
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
predict.lm(lm, newdata: hsb %>% filter(寫作 == -99))
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
missing <- filter(hsb, 寫作 == -99)
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
missing <- filter(hsb, 寫作 == -99)
writing.missing <- predict(g, newdata = missing)
writing.missing
