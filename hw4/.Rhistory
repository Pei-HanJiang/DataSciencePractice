nrow_iris = nrow_iris,
ncol_iris = ncol_iris,
n_setosa = n_setosa,
mean_values = mean_values,
count_over_5 = count_over_5,
n_versicolor_over_mean_virginica = n_versicolor_over_mean_virginica,
iris = iris,
max_species = max_species,
mean_total_length_per_species = mean_total_length_per_species
)
return(ans)
ans
hw2_function <- function() {
#' 給定一個矩陣X，
X <- cbind(x1 = 1, x2 = 1:10, x3 = sin(1:10))
#' 以及一個長度為3 的向量 beta。
beta <- c(0.5, -1, 4.3)
#' 我們稱`X[,1] 為x1, X[,2] 為x2, X[,3] 為 x3
#' 向量y 的值是 x1 * beta[1] + x2 * beta[2] + x3 * beta[3]，
#' 請用矩陣乘法`%*%`算出向量y。
#' dim(y) 應該是 c(10, 1)
# 1. 計算 y
ori_y <- X %*% beta
#' epsilon 是一個隨機產生的雜訊向量，
epsilon <- c(-1.24462014500259, 0.146172987456978, 1.56426869006839, -0.856920339050681,
-1.15277300953772, 0.717919832604741, -0.270623615316431, -1.66281578024014,
-1.15557078461633, -0.730253254897595)
#' 我們讓y 參雜了雜訊。
y <- ori_y + epsilon
# 2. 根據公式算出 beta.hat 的估計值
beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
# 計算與比較差異
x_difference <- beta.hat - beta
# 3. 引入 CO2 資料表的資料
X <- model.matrix(~ Type + Treatment + conc, CO2)
#' 如此就建立了一個基於 Type、Treatment 和 conc 的矩陣
#' 我們以 uptake 的值放入 y 之中，作為迴歸的目標
y <- CO2$uptake
# 4. 根據公式算出 co2_beta.hat 的估計值
co2_beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
y.hat <- X %*% co2_beta.hat
# 5. 計算 correlation
my.corr <- cor(X %*% beta.hat, y)
# 6. 用 lm() 函數進行線性迴歸
g <- lm(uptake ~ Type + Treatment + conc, CO2)
g.s <- summary(g)
g.s$r.squared
#' mode(g.s)顯示它是一個list。
#' 請取出上述線性迴歸的 R-squared 數值，並且與 my.corr 的平方做比較
# 提取 g.s 中的 R-squared 值
R_squared_lm <- g.s$r.squared
# 計算 my.corr^2 的值
R_squared_calculated <- my.corr^2
# 比較兩者 提示可以使用 identical() 函數，然後取相同的 round ，例如 round(x, 10)
decimal_places <- 10
x_rounded <- round(R_squared_lm[1], decimal_places)
y_rounded <- round(R_squared_calculated[1], decimal_places)
comparison <- identical(x_rounded, y_rounded)
# 使用 cars 資料表為例
# 引入 cars 資料集
data(cars)
# 建立設計矩陣 X (這邊只有截距和 speed)
# 將 dist 設為目標變數 y
# 利用最小平方法的公式計算 beta 的估計值
# 使用估計的 beta 值來計算 y 的估計值
#手刻
X <- cars$speed
y <- cars$dist
beta <- (solve(t(X) %*% X)) %*% t(X) %*% y
X %*% beta
#' 這邊我們可以計算X %*% beta.hat 和 y 的correlation（提示：用函數`cor`）
# 計算 y 的估計值和實際 y 值之間的相關性
my.corr_cars <- cor(X %*% beta, y)
# 使用 R 的內建 lm() 函數進行線性回歸
g_cars <- lm(dist ~ speed, cars)
# 從 lm() 的結果中提取 R-squared
g_cars2 <- summary(g_cars)
R_squared_lm_cars <- g_cars2$r.squared
# 確認手動計算的 R-squared (即 my.corr_cars^2) 是否與 lm() 函數的結果相符
is_identical <- g_cars2$r.squared == my.corr_cars^2
ans = list(
ori_y = ori_y,
beta_hat =  beta.hat,
x_difference = x_difference,
R_squared_lm = R_squared_lm,
R_squared_calculated = R_squared_calculated,
comparison = comparison,
my_corr_cars = my.corr_cars,
R_squared_lm_cars = R_squared_lm_cars,
mean_total_length_per_species = is_identical
)
}
#' 給定一個矩陣X，
X <- cbind(x1 = 1, x2 = 1:10, x3 = sin(1:10))
#' 以及一個長度為3 的向量 beta。
beta <- c(0.5, -1, 4.3)
# 1. 計算 y
ori_y <- X %*% beta
#' epsilon 是一個隨機產生的雜訊向量，
epsilon <- c(-1.24462014500259, 0.146172987456978, 1.56426869006839, -0.856920339050681,
-1.15277300953772, 0.717919832604741, -0.270623615316431, -1.66281578024014,
-1.15557078461633, -0.730253254897595)
#' 我們讓y 參雜了雜訊。
y <- ori_y + epsilon
beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
# 計算與比較差異
x_difference <- beta.hat - beta
# 3. 引入 CO2 資料表的資料
X <- model.matrix(~ Type + Treatment + conc, CO2)
#' 我們以 uptake 的值放入 y 之中，作為迴歸的目標
y <- CO2$uptake
co2_beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
y.hat <- X %*% co2_beta.hat
# 5. 計算 correlation
my.corr <- cor(X %*% beta.hat, y)
# 6. 用 lm() 函數進行線性迴歸
g <- lm(uptake ~ Type + Treatment + conc, CO2)
ori_y
y
ori_y
data.frame(ori_y)
epsilon
ori_y+epsilon
y
#' 我們讓y 參雜了雜訊。
y <- ori_y + epsilon
y
beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
?non-comformable
X
t(X)
t(X) %&%X
t(X) %*% X
solve(t(X) %*% X)
XtX <- t(X) %*% X
Xty <- t(X) %*% y
XtX <- t(X) %*% X
Xty <- t(X) %*% y
XtX <- t(X) %*% X
Xty <- t(X) %*% y
XtX <- t(X) %*% X
Xty <- t(X) %*% y
beta.hat <- solve(XtX, Xty)
t(X) %*% X
solve(t(X) %*% X)
solve(t(X) %*% X) %*% t(X)
solve(t(X) %*% X) %*% t(X) %*% y''
solve(t(X) %*% X) %*% t(X) %*% y
nrow(solve(t(X) %*% X) %*% t(X))
ncol(solve(t(X) %*% X) %*% t(X))
nrow(y)
ncol(y)
dim((solve(t(X) %*% X)) %*% t(X))
dim(ori_y)
#' 我們讓y 參雜了雜訊。
y <- ori_y + epsilon
y
#' 給定一個矩陣X，
X <- cbind(x1 = 1, x2 = 1:10, x3 = sin(1:10))
X
# 1. 計算 y
ori_y <- X %*% beta
ori_y
#' epsilon 是一個隨機產生的雜訊向量，
epsilon <- c(-1.24462014500259, 0.146172987456978, 1.56426869006839, -0.856920339050681,
-1.15277300953772, 0.717919832604741, -0.270623615316431, -1.66281578024014,
-1.15557078461633, -0.730253254897595)
#' 我們讓y 參雜了雜訊。
y <- ori_y + epsilon
y
# 2. 根據公式算出 beta.hat 的估計值
beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
beta.hat
# 計算與比較差異
x_difference <- beta.hat - beta
x_difference
# 3. 引入 CO2 資料表的資料
X <- model.matrix(~ Type + Treatment + conc, CO2)
X
#' 我們以 uptake 的值放入 y 之中，作為迴歸的目標
y <- CO2$uptake
co2_beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
#' 我們以 uptake 的值放入 y 之中，作為迴歸的目標
y <- CO2$uptake
y
co2_beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
co2_beta.hat
y.hat <- X %*% co2_beta.hat
y.hat
# 5. 計算 correlation
my.corr <- cor(X %*% beta.hat, y)
# 3. 引入 CO2 資料表的資料
X <- model.matrix(~ Type + Treatment + conc, CO2)
X
#' 我們以 uptake 的值放入 y 之中，作為迴歸的目標
y <- CO2$uptake
y
co2_beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
co2_beta.hat
y.hat <- X %*% co2_beta.hat
y.hat
# 5. 計算 correlation
my.corr <- cor(X %*% beta.hat, y)
# 5. 計算 correlation
my.corr <- cor(X %*% CO2_beta.hat, y)
# 5. 計算 correlation
my.corr <- cor(X %*% co2_beta.hat, y)
my.corr
co2_beta.hat
y.hat <- X %*% co2_beta.hat
y.hat
# 5. 計算 correlation
my.corr <- cor(X %*% co2_beta.hat, y)
my.corr
# 6. 用 lm() 函數進行線性迴歸
g <- lm(uptake ~ Type + Treatment + conc, CO2)
g.s <- summary(g)
g.s$r.squared
# 提取 g.s 中的 R-squared 值
R_squared_lm <- g.s$r.squared
R_squared_lm
# 計算 my.corr^2 的值
R_squared_calculated <- my.corr^2
R_squared_calculated
# 比較兩者 提示可以使用 identical() 函數，然後取相同的 round ，例如 round(x, 10)
decimal_places <- 10
x_rounded <- round(R_squared_lm[1], decimal_places)
y_rounded <- round(R_squared_calculated[1], decimal_places)
comparison <- identical(x_rounded, y_rounded)
comparison
# 使用 cars 資料表為例
# 引入 cars 資料集
data(cars)
# 建立設計矩陣 X (這邊只有截距和 speed)
# 將 dist 設為目標變數 y
# 利用最小平方法的公式計算 beta 的估計值
# 使用估計的 beta 值來計算 y 的估計值
#手刻
X <- cars$speed
y <- cars$dist
beta <- (solve(t(X) %*% X)) %*% t(X) %*% y
X %*% beta
#' 這邊我們可以計算X %*% beta.hat 和 y 的correlation（提示：用函數`cor`）
# 計算 y 的估計值和實際 y 值之間的相關性
my.corr_cars <- cor(X %*% beta, y)
# 使用 R 的內建 lm() 函數進行線性回歸
g_cars <- lm(dist ~ speed, cars)
# 從 lm() 的結果中提取 R-squared
g_cars2 <- summary(g_cars)
R_squared_lm_cars <- g_cars2$r.squared
# 確認手動計算的 R-squared (即 my.corr_cars^2) 是否與 lm() 函數的結果相符
is_identical <- g_cars2$r.squared == my.corr_cars^2
is_identical
# 確認手動計算的 R-squared (即 my.corr_cars^2) 是否與 lm() 函數的結果相符
decimal_places <- 10
x_rounded <- round(R_squared_lm_cars[1], decimal_places)
y_rounded <- round(my.corr_cars^2, decimal_places)
is_identical <- identical(x_rounded, y_rounded)
is_identical
# 使用 cars 資料表為例
# 引入 cars 資料集
data(cars)
# 建立設計矩陣 X (這邊只有截距和 speed)
# 將 dist 設為目標變數 y
# 利用最小平方法的公式計算 beta 的估計值
# 使用估計的 beta 值來計算 y 的估計值
#手刻
X <- cars$speed
y <- cars$dist
beta <- (solve(t(X) %*% X)) %*% t(X) %*% y
X %*% beta
#' 這邊我們可以計算X %*% beta.hat 和 y 的correlation（提示：用函數`cor`）
# 計算 y 的估計值和實際 y 值之間的相關性
my.corr_cars <- cor(X %*% beta, y)
my.corr_cars
# 使用 R 的內建 lm() 函數進行線性回歸
g_cars <- lm(dist ~ speed, cars)
# 從 lm() 的結果中提取 R-squared
g_cars2 <- summary(g_cars)
R_squared_lm_cars <- g_cars2$r.squared
R_squared_lm_cars
?lapply
# 請依照指示完成資料處理
# 這是從 <http://data.gov.tw/node/7769> 下載的海盜通報資料，
# 請使用課堂所學的技巧，將此文件中的資訊整理成為表格。
# 首先，先將該檔案載入到R 之中。
pirate_info <- readLines(file("pirate-info-2015-09_2.txt", encoding = ""))
# 請依照指示完成資料處理
# 這是從 <http://data.gov.tw/node/7769> 下載的海盜通報資料，
# 請使用課堂所學的技巧，將此文件中的資訊整理成為表格。
# 首先，先將該檔案載入到R 之中。
pirate_info <- readLines(file("pirate-info-2015-09_2.txt", encoding = "UTF-8"))
# 請依照指示完成資料處理
# 這是從 <http://data.gov.tw/node/7769> 下載的海盜通報資料，
# 請使用課堂所學的技巧，將此文件中的資訊整理成為表格。
# 首先，先將該檔案載入到R 之中。
pirate_info <- readLines(file("pirate-info-2015-09_2.txt", encoding = "BIG5"))
# 這份資料的格式，可以用`：`分割出資料的欄位與內容，
# 請同學利用`strsplit`將`pirate_info`進行切割，
# 並將結果儲存到`pirate_info_key_value`之中。
pirate_info_key_value <- strsplit(pirate_info, split = ':')
# 請依照指示完成資料處理
# 這是從 <http://data.gov.tw/node/7769> 下載的海盜通報資料，
# 請使用課堂所學的技巧，將此文件中的資訊整理成為表格。
# 首先，先將該檔案載入到R 之中。
pirate_info <- readLines(file("pirate-info-2015-09_2.txt", encoding = "BIG5"))
# 這份資料的格式，可以用`：`分割出資料的欄位與內容，
# 請同學利用`strsplit`將`pirate_info`進行切割，
# 並將結果儲存到`pirate_info_key_value`之中。
pirate_info_key_value <- strsplit(pirate_info, split = ':')
View(answerHW)
#' 請用學到的方法讀取附件 gdp.txt 的資料、整理資料，並把最後的結果存到變數`gdp`。
#' 提示：資料中的第一欄數據是年/季、第二欄數據是該季的GDP(百萬)。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是我國每年的GDP，
#' 具體細節請參考最後的`stopifnot`的檢查事項。
#' 提示：拿掉數據中間的逗號，請用：`gsub(pattern = ",", replacement = "", x = <你的字串向量>)`
gdp <- read.csv("~/Desktop/資料科學實務/hw4/GDP.txt")
gdp <- data.frame(gdp[4:135, 1:2])
colnames(gdp) <- c("year", "gdp")
rownames(gdp) <- NULL
gdp$gdp <- gsub(pattern = ",", replacement = "", x = gdp$gdp)
gdp$gdp <- as.numeric(gdp$gdp)
gdp$year <- substr(x = gdp$year, start = 1, stop = 4)
seq(1,132, by = 4)
total <- c()
for(i in  seq(1, length(gdp$gdp), 4)){
sum1 <-sum(gdp$gdp[i:(i+3)])
total <- c(total, sum1)
}
total <- total*1000000
year <- seq(1981, 2013, 1)
year <- as.character(year)
gdp_result <- data.frame(year, total)
colnames(gdp_result) = c("year", "gdp")
# 請填寫你的程式碼。
gdp <- gdp_result
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
stopifnot(range(gdp$year) == c("1981", "2013"))
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
#' cl_info_other 的資料包含各家銀行的房貸餘額（mortgage_bal）資訊與資料建立的時間（data_dt）。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至`cl_info_year`。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值(請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info <- read.csv("cl_info_other.csv")
cl_info %>%
select(data_dt, mortgage_bal) -> cl_info
cl_info <- mutate(cl_info, grepl("01-01", cl_info$data_dt))
colnames(cl_info)[3] <- "January"
cl_info <- filter(cl_info, January == TRUE)
cl_info %>%
group_by(data_dt) %>%
summarise(sum(mortgage_bal)) -> cl_info
cl_info$data_dt <-substr(cl_info$data_dt, 1, 4)
colnames(cl_info) = c("year", "mortgage_total_bal")
as.numeric(cl_info$mortgage_total_bal)
setwd("~/Desktop/資料科學實務/hw4")
#' 請用學到的方法讀取附件 gdp.txt 的資料、整理資料，並把最後的結果存到變數`gdp`。
#' 提示：資料中的第一欄數據是年/季、第二欄數據是該季的GDP(百萬)。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是我國每年的GDP，
#' 具體細節請參考最後的`stopifnot`的檢查事項。
#' 提示：拿掉數據中間的逗號，請用：`gsub(pattern = ",", replacement = "", x = <你的字串向量>)`
gdp <- read.csv("~/Desktop/資料科學實務/hw4/GDP.txt")
gdp <- data.frame(gdp[4:135, 1:2])
colnames(gdp) <- c("year", "gdp")
rownames(gdp) <- NULL
gdp$gdp <- gsub(pattern = ",", replacement = "", x = gdp$gdp)
gdp$gdp <- as.numeric(gdp$gdp)
gdp$year <- substr(x = gdp$year, start = 1, stop = 4)
seq(1,132, by = 4)
total <- c()
for(i in  seq(1, length(gdp$gdp), 4)){
sum1 <-sum(gdp$gdp[i:(i+3)])
total <- c(total, sum1)
}
total <- total*1000000
year <- seq(1981, 2013, 1)
year <- as.character(year)
gdp_result <- data.frame(year, total)
colnames(gdp_result) = c("year", "gdp")
# 請填寫你的程式碼。
gdp <- gdp_result
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
stopifnot(range(gdp$year) == c("1981", "2013"))
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
#' cl_info_other 的資料包含各家銀行的房貸餘額（mortgage_bal）資訊與資料建立的時間（data_dt）。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至`cl_info_year`。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值(請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info <- read.csv("cl_info_other.csv")
cl_info %>%
select(data_dt, mortgage_bal) -> cl_info
cl_info <- mutate(cl_info, grepl("01-01", cl_info$data_dt))
colnames(cl_info)[3] <- "January"
cl_info <- filter(cl_info, January == TRUE)
cl_info %>%
group_by(data_dt) %>%
summarise(sum(mortgage_bal)) -> cl_info
cl_info$data_dt <-substr(cl_info$data_dt, 1, 4)
colnames(cl_info) = c("year", "mortgage_total_bal")
library(dpylr)
installed.packages(dpylr)
installed.packages("dpylr")
#' 請用學到的方法讀取附件 gdp.txt 的資料、整理資料，並把最後的結果存到變數`gdp`。
#' 提示：資料中的第一欄數據是年/季、第二欄數據是該季的GDP(百萬)。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是我國每年的GDP，
#' 具體細節請參考最後的`stopifnot`的檢查事項。
#' 提示：拿掉數據中間的逗號，請用：`gsub(pattern = ",", replacement = "", x = <你的字串向量>)`
gdp <- read.csv("~/Desktop/資料科學實務/hw4/GDP.txt")
gdp <- data.frame(gdp[4:135, 1:2])
colnames(gdp) <- c("year", "gdp")
rownames(gdp) <- NULL
gdp$gdp <- gsub(pattern = ",", replacement = "", x = gdp$gdp)
gdp$gdp <- as.numeric(gdp$gdp)
gdp$year <- substr(x = gdp$year, start = 1, stop = 4)
seq(1,132, by = 4)
total <- c()
for(i in  seq(1, length(gdp$gdp), 4)){
sum1 <-sum(gdp$gdp[i:(i+3)])
total <- c(total, sum1)
}
total <- total*1000000
year <- seq(1981, 2013, 1)
year <- as.character(year)
gdp_result <- data.frame(year, total)
colnames(gdp_result) = c("year", "gdp")
# 請填寫你的程式碼。
gdp <- gdp_result
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
stopifnot(range(gdp$year) == c("1981", "2013"))
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
#' cl_info_other 的資料包含各家銀行的房貸餘額（mortgage_bal）資訊與資料建立的時間（data_dt）。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至`cl_info_year`。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值(請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info <- read.csv("cl_info_other.csv")
cl_info %>%
select(data_dt, mortgage_bal) -> cl_info
cl_info <- mutate(cl_info, grepl("01-01", cl_info$data_dt))
colnames(cl_info)[3] <- "January"
cl_info <- filter(cl_info, January == TRUE)
cl_info %>%
group_by(data_dt) %>%
summarise(sum(mortgage_bal)) -> cl_info
library(dpylr)
install.packages("dpylr")
#' cl_info_other 的資料包含各家銀行的房貸餘額（mortgage_bal）資訊與資料建立的時間（data_dt）。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至`cl_info_year`。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值(請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info <- read.csv("cl_info_other.csv")
cl_info %>%
select(data_dt, mortgage_bal) -> cl_info
library(dpylr)
install.packages("dpylr")
library(dpylr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
#' cl_info_other 的資料包含各家銀行的房貸餘額（mortgage_bal）資訊與資料建立的時間（data_dt）。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至`cl_info_year`。
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值(請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info <- read.csv("cl_info_other.csv")
cl_info %>%
select(data_dt, mortgage_bal) -> cl_info
cl_info <- mutate(cl_info, grepl("01-01", cl_info$data_dt))
colnames(cl_info)[3] <- "January"
cl_info <- filter(cl_info, January == TRUE)
cl_info %>%
group_by(data_dt) %>%
summarise(sum(mortgage_bal)) -> cl_info
cl_info$data_dt <-substr(cl_info$data_dt, 1, 4)
colnames(cl_info) = c("year", "mortgage_total_bal")
as.numeric(cl_info$mortgage_total_bal)
cl_info_year <- cl_info
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
stopifnot(class(cl_info_year$year) == "character")
stopifnot(class(cl_info_year$mortgage_total_bal) == "numeric")
stopifnot(nrow(cl_info_year) == 9)
stopifnot(range(cl_info_year$year) == c("2006", "2014"))
stopifnot(range(cl_info_year$mortgage_total_bal) == c(3.79632e+12, 5.726784e+12))
#' 最後，請同學用這門課程所學的技術整合`gdp`與`cl_info`的資料，
#' 並計算出房貸餘額與gdp的比率（mortgage_total_bal / gdp）。
#' 請將結果輸出到一個data.frame，第一欄是年份，第二欄則是房貸餘額的GDP佔有比率。
#' 細節請參考`stopifnot`的檢查。
answer <- left_join(cl_info, gdp)
answer <- mutate(answer, index = answer$mortgage_total_bal/answer$gdp)
answer <- answer[-9,]
answerHW <- answer %>% select(year, index)
stopifnot(is.data.frame(answerHW))
stopifnot(nrow(answerHW) == 8)
stopifnot(colnames(answerHW) == c("year", "index"))
stopifnot(class(answerHW$year) == "character")
stopifnot(class(answerHW$index) == "numeric")
stopifnot(min(answerHW$index) > 0.3)
stopifnot(max(answerHW$index) < 0.4)
View(answerHW)
