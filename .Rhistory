# install.packages("dplyr")
# vignette(package = "dplyr")
# vignette("introduction", package = "dplyr")
# 各位同學可以嘗試閱讀 dplyr 套件的文件，了解其源流與用法
library(dplyr)
# 我們將使用紐約機場起降的飛機資料來進行練習
# install.packages("nycflights13")
library(nycflights13)
# install.packages("dplyr")
# vignette(package = "dplyr")
# vignette("introduction", package = "dplyr")
# 各位同學可以嘗試閱讀 dplyr 套件的文件，了解其源流與用法
library(dplyr)
# 我們將使用紐約機場起降的飛機資料來進行練習
# install.packages("nycflights13")
library(nycflights13)
View(wind_speed)
install.packages("dplyr")
# vignette(package = "dplyr")
# vignette("introduction", package = "dplyr")
# 各位同學可以嘗試閱讀 dplyr 套件的文件，了解其源流與用法
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
View(weather)
View(weather)
View(flights)
head(flights)
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
library(nycflights13)
flights
View(flights)
View(weather)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights_first_half_baseR <-
flights_first_half_dplyr <- filter(flights, month >= 1 & month <= 6)
range(flights$month)
c(1:15)
c(1:15) -> x
c(13:18) -> y
y
intersect(x,y)
x
y
union(x,y)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights_first_half_baseR <-
flights_first_half_dplyr <- filter(flights, month >= 1 & month <= 6)
colnames(flights)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights_first_half_baseR <-
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights_first_half_baseR <-
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
flights
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights_first_half_baseR <- flights[flights$month >= 1 & fligths$month <= 6, ]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
install.packages("dplyr")
vignette(package = "dplyr")
vignette("introduction", package = "dplyr")
library(dplyr)
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights_first_half_baseR <- flights[flights$month >= 1 & fligths$month <= 6, ]
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
install.packages("nycflights13")
vignette(package = "dplyr")
library(nycflights13)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights_first_half_baseR <- flights[flights$month >= 1 & fligths$month <= 6, ]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights_first_half_baseR <- fligths[flights$month >= 1 & flights$month <= 6,]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
View(flights)
flights
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights
flights_first_half_baseR <- fligths[flights$month >= 1 & flights$month <= 6,]
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights <- fligths
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
library(nycflights13)
install.packages("dplyr")
library(dplyr)
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
#請各位同學撈出資料表中班機編號 (tailnum) 以 "AA" 開頭的班機資料
flights_AA_dplyr <- filter(flights, grepl("AA", tailnum))
flights_AA_baseR <- flights[grepl("AA", flights$tailnum),]
# 請練習以 dplyr 語法以及 baseR 語法取出 flights 資料表中奇數列的資料
flights_odd_rows_dplyr <- slice(flights, seq(1, nrow(flights), 2))
flights_odd_rows_baseR <- flights[seq(1,nrow(flights),2),]
# 請練習以 dplyr 語法以集 baseR 語法取出 flights 資料表中 1000 到 2000 列 以及 2500 到 3500 列的資料
flights_selected_rows_baseR <- slice(flights, 1000:2000, 2500:3500)
# # 請參閱 arrange 與 order 的 help，試著由大至小進行排序
# 使用 dplyr
flights_sorted_dplyr <- arrange(flights, desc(month), desc(day), desc(dep_time))
# 使用 base R
flights_sorted_baseR <- with(flights, flights[order(desc(month), desc(day), desc(dep_time)),])
# 上述資料中第一列的 dep_time 為 517
# 代表了 1 月 1 日 當天最早的班機是 5:17 起飛的
# 那麼整個紀錄中起飛時刻最早是幾點呢？
earliest_arr_time <- flights$arr_time[min(flights$arr_time, na.rm = TRUE)]
# 以 %>% 指令改寫 group_by, summarise 流程會十分簡單
# 這邊我們做一個練習，請問美國航空公司 (carrier == "AA")，其班機尾標是否都有 AA 字眼，去掉 na
all_AA_tailnums <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
select(tailnum) %>%
summarise(all_aa = all(grepl("AA", tailnum, ignore.case = TRUE)))
library(dplyr)
library(nycflights13)
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
stopifnot(nrow(flights_AA_dplyr)==32645)
stopifnot(nrow(flights_AA_baseR)==32645)
stopifnot(nrow(flights_odd_rows_dplyr)==168388)
stopifnot(nrow(flights_odd_rows_baseR)==168388)
stopifnot(nrow(flights_selected_rows_baseR)==2002)
stopifnot(nrow(flights_sorted_dplyr)==336776)
stopifnot(nrow(flights_sorted_baseR)==336776)
stopifnot(earliest_arr_time==830)
stopifnot(all_AA_tailnums==TRUE)
stopifnot(average_delays$dep_delay[1]==139.838709677419)
dep_delay[1]
average_delays$dep_delay[1]
View(all_AA_tailnums)
test1 <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
test1 <- flights %>%
na.omit() %>%
filter(carrier == "AA")
View(test1)
test2 <- test1 %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
average_delays <- test2 %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
average_delays$dep_delay[1]
rm(list = ls())
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
#請各位同學撈出資料表中班機編號 (tailnum) 以 "AA" 開頭的班機資料
flights_AA_dplyr <- filter(flights, grepl("AA", tailnum))
flights_AA_baseR <- flights[grepl("AA", flights$tailnum),]
# 請練習以 dplyr 語法以及 baseR 語法取出 flights 資料表中奇數列的資料
flights_odd_rows_dplyr <- slice(flights, seq(1, nrow(flights), 2))
flights_odd_rows_baseR <- flights[seq(1,nrow(flights),2),]
# 請練習以 dplyr 語法以集 baseR 語法取出 flights 資料表中 1000 到 2000 列 以及 2500 到 3500 列的資料
flights_selected_rows_baseR <- slice(flights, 1000:2000, 2500:3500)
# # 請參閱 arrange 與 order 的 help，試著由大至小進行排序
# 使用 dplyr
flights_sorted_dplyr <- arrange(flights, desc(month), desc(day), desc(dep_time))
# 使用 base R
flights_sorted_baseR <- with(flights, flights[order(desc(month), desc(day), desc(dep_time)),])
# 上述資料中第一列的 dep_time 為 517
# 代表了 1 月 1 日 當天最早的班機是 5:17 起飛的
# 那麼整個紀錄中起飛時刻最早是幾點呢？
earliest_arr_time <- flights$arr_time[min(flights$arr_time, na.rm = TRUE)]
# 以 %>% 指令改寫 group_by, summarise 流程會十分簡單
# 這邊我們做一個練習，請問美國航空公司 (carrier == "AA")，其班機尾標是否都有 AA 字眼，去掉 na
all_AA_tailnums <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
select(tailnum) %>%
summarise(all_aa = all(grepl("AA", tailnum, ignore.case = TRUE)))
library(dplyr)
library(nycflights13)
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
stopifnot(nrow(flights_AA_dplyr)==32645)
stopifnot(nrow(flights_AA_baseR)==32645)
stopifnot(nrow(flights_odd_rows_dplyr)==168388)
stopifnot(nrow(flights_odd_rows_baseR)==168388)
stopifnot(nrow(flights_selected_rows_baseR)==2002)
stopifnot(nrow(flights_sorted_dplyr)==336776)
stopifnot(nrow(flights_sorted_baseR)==336776)
stopifnot(earliest_arr_time==830)
stopifnot(all_AA_tailnums==TRUE)
stopifnot(average_delays$dep_delay[1]==139.838709677419)
stopifnot(average_delays$arr_delay[1]==129.5161290322581)
mean(flights$dep_delay)
stopifnot(all_AA_tailnums==TRUE)
average_delays$dep_delay[1]
average_delays$dep_delay[1]
average_delays$dep_delay[1]
average_delays$dep_delay[1]
average_delays$dep_delay[1]
average_delays$arr_delay[1]
mean(flights$dep_delay)
rm(list = ls())
# Exercise 1: Extract data for the first half of the year (January to June)
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
# Exercise 2: Extract flights with tail numbers starting with "AA"
flights_AA_dplyr <- filter(flights, grepl("AA", tailnum))
flights_AA_baseR <- flights[grepl("AA", flights$tailnum),]
# Exercise 3: Extract odd-numbered rows from the flights dataset
flights_odd_rows_dplyr <- slice(flights, seq(1, nrow(flights), 2))
flights_odd_rows_baseR <- flights[seq(1,nrow(flights),2),]
# Exercise 4: Extract specific rows using dplyr and base R
flights_selected_rows_baseR <- slice(flights, 1000:2000, 2500:3500)
# Exercise 5: Sort the dataset by month, day, and departure time in descending order
flights_sorted_dplyr <- arrange(flights, desc(month), desc(day), desc(dep_time))
flights_sorted_baseR <- with(flights, flights[order(desc(month), desc(day), desc(dep_time)),])
# Find the earliest departure time in the dataset
earliest_arr_time <- flights$arr_time[min(flights$arr_time, na.rm = TRUE)]
# Exercise 6: Use %>% to simplify the group_by, summarise process
all_AA_tailnums <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
select(tailnum) %>%
summarise(all_aa = all(grepl("AA", tailnum, ignore.case = TRUE)))
# Exercise 7: Calculate average departure and arrival delays for different time periods
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
# Check if the results match the expected values
stopifnot(nrow(flights_first_half_dplyr) == 166158)
stopifnot(nrow(flights_first_half_baseR) == 166158)
stopifnot(nrow(flights_AA_dplyr) == 32645)
stopifnot(nrow(flights_AA_baseR) == 32645)
stopifnot(nrow(flights_odd_rows_dplyr) == 168388)
stopifnot(nrow(flights_odd_rows_baseR) == 168388)
stopifnot(nrow(flights_selected_rows_baseR) == 2002)
stopifnot(nrow(flights_sorted_dplyr) == 336776)
stopifnot(nrow(flights_sorted_baseR) == 336776)
stopifnot(earliest_arr_time == 830)
stopifnot(all_AA_tailnums == TRUE)
stopifnot(average_delays$dep_delay[1] == 139.838709677419)
stopifnot(average_delays$arr_delay[1] == 129.5161290322581)
