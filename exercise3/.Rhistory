setwd("~/Downloads/exercise1")
?read.csv
gdp <- read.csv("GDP.txt", sep = ",", skip = 4)
View(gdp)
gdp <- read.csv("GDP.txt", sep = ",", skip = 3)
gdp <- gdp[1:2,]
gdp <- read.csv("GDP.txt", sep = ",", skip = 3)
gdp <- gdp[,1:2]
colnames(gdp) <- c("year", "gdp")
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
gdp$gdp <- as.numeric(gsub(",","",gdp$gdp))
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
nrow(gdp)
gdp$year <- substr(gdp$year,1,4)
install(dyplr)
install.packages("dyplr)
\
install.packages("dyplr")
install.packages("dpylr")
install.packages("dplyr")
library(dplyr)
gdp %>%
group_by(year)%>%
summarise(gdp = sum())
gdp %>%
group_by(year)%>%
summarise(gdp = sum()) ->gdp
gdp %>%
group_by(year)%>%
summarise(gdp = sum(gdp)) -> gdp
gdp <- read.csv("GDP.txt", sep = ",", skip = 3)
gdp <- gdp[,1:2]
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- as.numeric(gsub(",","",gdp$gdp))
gdp$year <- substr(gdp$year,1,4)
gdp %>%
group_by(year)%>%
summarise(gdp = sum(gdp)) -> gdp
na.omit(gdp)
gdp <- na.omit(gdp)
nrow(gdp)
gdp <- read.csv("GDP.txt", sep = ",", skip = 3)
gdp <- gdp[,1:2]
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- as.numeric(gsub(",","",gdp$gdp))
gdp <- read.csv("GDP.txt", sep = ",", skip = 3)
gdp <- gdp[,1:2]
gpd <- gdp[1:132]
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- as.numeric(gsub(",","",gdp$gdp))
gdp$year <- substr(gdp$year,1,4)
gpd <- gdp[1:132,]
gdp <- read.csv("GDP.txt", sep = ",", skip = 3)
gdp <- gdp[,1:2]
gpd <- gdp[1:132,]
nrow(gdp)
gpd <- gdp[1:132,]
nrow(gdp)
View(gpd)
View(gdp)
gdp <- read.csv("GDP.txt", sep = ",", skip = 3)
gdp <- gdp[,1:2]
gdd <- gdp[1:132,]
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- as.numeric(gsub(",","",gdp$gdp))
gdp$year <- substr(gdp$year,1,4)
rm(ls())
re(list = ls())
rm(list = ls())
gdp <- read.csv("GDP.txt", sep = ",", skip = 3)
gdp <- gdp[,1:2]
gdp <- gdp[1:132,]
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- as.numeric(gsub(",","",gdp$gdp))
gdp$year <- substr(gdp$year,1,4)
gdp %>%
group_by(year)%>%
summarise(gdp = sum(gdp)) -> gdp
nrow(gdp)
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
stopifnot(range(gdp$year) == c("1981", "2013"))
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
gdp$gdp <- gdp$gdp * 1000000
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
stopifnot(range(gdp$year) == c("1981", "2013"))
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
#' cl_info_other.csv 的資料包含各家銀行的房貸餘額 (mortgage_bal) 資訊與資料建立的時間 (data_dt)。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至 cl_info_year
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值 (請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info_year <- NULL
#' cl_info_other.csv 的資料包含各家銀行的房貸餘額 (mortgage_bal) 資訊與資料建立的時間 (data_dt)。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至 cl_info_year
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值 (請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info_year <- read.csv(cl_info_other.csv)
setwd("~/Downloads/exercise1")
#' cl_info_other.csv 的資料包含各家銀行的房貸餘額 (mortgage_bal) 資訊與資料建立的時間 (data_dt)。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至 cl_info_year
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值 (請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info_year <- read.csv(cl_info_other.csv)
#' cl_info_other.csv 的資料包含各家銀行的房貸餘額 (mortgage_bal) 資訊與資料建立的時間 (data_dt)。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至 cl_info_year
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值 (請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info_year <- read.csv("cl_info_other.csv")
View(cl_info_year)
stopifnot(is.data.frame(cl_info_year))
cl_info_year <- cl_info_year[,3:6]
#' cl_info_other.csv 的資料包含各家銀行的房貸餘額 (mortgage_bal) 資訊與資料建立的時間 (data_dt)。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至 cl_info_year
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值 (請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info_year <- read.csv("cl_info_other.csv")
cl_info_year <- select(cl_info_year, 3,6)
cl_info_year$data_dt <- substr(cl_info_year$data_dt,1,7)
cl_info_year %>%
group_by(data_dt) %>%
summarise(mortgage_bal = sum(mortgage_bal)) -> cl_info_year
cl_info_year <- select(cl_info_year, row_number()%12 == 1)
cl_info_year %>%
filter(row_number() %% 12 == 1) -> cl_info_year
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
colnames(cl_info_year) <- c("year", "mortgage_total_bal")
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
stopifnot(class(cl_info_year$year) == "character")
stopifnot(class(cl_info_year$mortgage_total_bal) == "numeric")
stopifnot(nrow(cl_info_year) == 9)
stopifnot(range(cl_info_year$year) == c("2006", "2014"))
cl_info_year$data_dt <- substr(cl_info_year$data_dt,1,4)
cl_info_year$year <- substr(cl_info_year$year,1,4)
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
stopifnot(class(cl_info_year$year) == "character")
stopifnot(class(cl_info_year$mortgage_total_bal) == "numeric")
stopifnot(nrow(cl_info_year) == 9)
stopifnot(range(cl_info_year$year) == c("2006", "2014"))
stopifnot(range(cl_info_year$mortgage_total_bal) == c(3.79632e+12, 5.726784e+12))
View(gdp)
mortgage2gdp <- left_join(cl_info_year, gdp)
View(mortgage2gdp)
mortgage2gdp["index"] = mortgage2gdp$mortgage_total_bal/mortgage2gdp$gdp
stopifnot(is.data.frame(mortgage2gdp))
stopifnot(nrow(mortgage2gdp) == 8)
mortgage2gdp <- mortgage2gdp[1:8,]
stopifnot(is.data.frame(mortgage2gdp))
stopifnot(nrow(mortgage2gdp) == 8)
stopifnot(is.data.frame(mortgage2gdp))
stopifnot(nrow(mortgage2gdp) == 8)
stopifnot(colnames(mortgage2gdp) == c("year", "index"))
mortgage2gdp <- select(mortgage2gdp, 1, 4)
stopifnot(is.data.frame(mortgage2gdp))
stopifnot(nrow(mortgage2gdp) == 8)
stopifnot(colnames(mortgage2gdp) == c("year", "index"))
stopifnot(class(mortgage2gdp$year) == "character")
stopifnot(class(mortgage2gdp$index) == "numeric")
stopifnot(min(mortgage2gdp$index) > 0.3)
stopifnot(max(mortgage2gdp$index) < 0.4)
gdp <- read.csv("GDP.txt", sep = ",", skip = 3)
gdp <- gdp[,1:2]
gdp <- gdp[1:132,]
colnames(gdp) <- c("year", "gdp")
gdp$gdp <- as.numeric(gsub(",","",gdp$gdp))
gdp$year <- substr(gdp$year,1,4)
gdp %>%
group_by(year)%>%
summarise(gdp = sum(gdp)) -> gdp
gdp$gdp <- gdp$gdp * 1000000
stopifnot(is.data.frame(gdp))
stopifnot(colnames(gdp) == c("year", "gdp"))
stopifnot(class(gdp$year) == "character")
stopifnot(class(gdp$gdp) == "numeric")
stopifnot(nrow(gdp) == 33)
stopifnot(range(gdp$year) == c("1981", "2013"))
stopifnot(range(gdp$gdp) == c(1810829,14564242) * 1000000)
#' cl_info_other.csv 的資料包含各家銀行的房貸餘額 (mortgage_bal) 資訊與資料建立的時間 (data_dt)。
#' 請用學到的方法整理cl_info的資料，並把最後的結果整理至 cl_info_year
#' 結果應該要有兩欄的數據，第一欄是年份，第二欄是每年房貸餘額的值 (請以每年的一月份資料為準)。
#' 具體細節請參考最後的`stopifnot`檢查事項。
cl_info_year <- read.csv("cl_info_other.csv")
cl_info_year <- select(cl_info_year, 3,6)
cl_info_year$data_dt <- substr(cl_info_year$data_dt,1,7)
cl_info_year %>%
group_by(data_dt) %>%
summarise(mortgage_bal = sum(mortgage_bal)) -> cl_info_year
cl_info_year %>%
filter(row_number() %% 12 == 1) -> cl_info_year
colnames(cl_info_year) <- c("year", "mortgage_total_bal")
cl_info_year$year <- substr(cl_info_year$year,1,4)
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
stopifnot(class(cl_info_year$year) == "character")
stopifnot(class(cl_info_year$mortgage_total_bal) == "numeric")
stopifnot(nrow(cl_info_year) == 9)
stopifnot(range(cl_info_year$year) == c("2006", "2014"))
stopifnot(range(cl_info_year$mortgage_total_bal) == c(3.79632e+12, 5.726784e+12))
mortgage2gdp <- left_join(cl_info_year, gdp)
mortgage2gdp["index"] = mortgage2gdp$mortgage_total_bal/mortgage2gdp$gdp
mortgage2gdp <- mortgage2gdp[1:8,]
mortgage2gdp <- select(mortgage2gdp, 1, 4)
stopifnot(is.data.frame(mortgage2gdp))
stopifnot(nrow(mortgage2gdp) == 8)
stopifnot(colnames(mortgage2gdp) == c("year", "index"))
stopifnot(class(mortgage2gdp$year) == "character")
stopifnot(class(mortgage2gdp$index) == "numeric")
stopifnot(min(mortgage2gdp$index) > 0.3)
stopifnot(max(mortgage2gdp$index) < 0.4)
setwd("~/Downloads/exercise2")
hsb <- read.csv("hsb.csv")
hsb <- read.csv("hsb.csv", skip = 2, fileEncoding = "utf-8")
hsb <- read.csv("hsb.csv", skip = 2, fileEncoding = "Big5")
hsb <- read.csv("hsb.csv", fileEncoding = "UTF-16BE",sep=",", head = TRUE, skip = 1)
View(hsb)
hsb.new <- filter(!(hsb$寫作 == -99))
hsb.new <- filter(hsb, !(hsb$寫作 == -99))
View(hsb.new)
# 請分別計算 hsb.new 資料表中男生與女生的各科平均，並且將其整理成一個 data.frame 指入 hsb.split 變數
hsb.new %>%
group_by(性別) %>%
summarise(閱讀平均 = mean(閱讀),
寫作平均 = mean(寫作),
數學平均 = mean(數學),
科學平均 = mean(科學),
社會科學平均 = mean(社會科學)) -> hsb.split
View(hsb.split)
stopifnot(isTRUE(all.equal(colnames(hsb.split), c("性別","閱讀平均","寫作平均","數學平均","科學平均","社會科學平均"))))
# 除去編號與分類別，請嘗試以 "性別"、"種族"、"學校類型"、"學程類型"、"閱讀"、"數學"、"科學"、"社會科學" 等項建立線性模型預測寫作成績，並將建立出來模型的 R.square 值，存入變數 R2 中
# 提示：以 lm 建立線性模型，字串類別的資料須先轉換成為 R 認可的類別型資料
# 提示： summary 建好的模型可以獲得 R.square 值，可用 str 指令觀察該如何取出
g <- lm(寫作~性別+種族+學校類型+學程類型+閱讀+數學+科學+社會科學, hsb.new)
# 其中我們發現男生與女生的寫作平均有顯著的差異，請以 ks.test 嘗試驗證男生與女生的寫作成績在分布上是否有顯著差異，並將答案指入 is.male_female_diff_in_writing 變數中，若有顯著差異答案為 TRUE 若沒有則為 FALSE
# 提示：以 ks.test 檢驗男生與女生的寫作成績，並檢查 p.value 是否小於 0.05
is.male_female_diff_in_writing <- TRUE
# 除去編號與分類別，請嘗試以 "性別"、"種族"、"學校類型"、"學程類型"、"閱讀"、"數學"、"科學"、"社會科學" 等項建立線性模型預測寫作成績，並將建立出來模型的 R.square 值，存入變數 R2 中
# 提示：以 lm 建立線性模型，字串類別的資料須先轉換成為 R 認可的類別型資料
# 提示： summary 建好的模型可以獲得 R.square 值，可用 str 指令觀察該如何取出
g <- lm(寫作~性別+種族+學校類型+學程類型+閱讀+數學+科學+社會科學, hsb.new)
R2 <- summary(g)$r.squared
R2
writing.missing <- hsb$閱讀[hsb$閱讀 == -99] <- predict(g, newdata = hsb[hsb$閱讀 == -99, ])
writing.missing
writing.missing <-predict(g, newdata = hsb[hsb$閱讀 == -99, ])
writing.missing
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
missing_rows <- which(hsb$閱讀 == -99))
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
missing_rows <- which(hsb$閱讀 == -99)
predict_reading <- predict(g, newdata = hsb[missing_rows])
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
missing_rows <- which(hsb$閱讀 == -99)
predict_reading <- predict(g, newdata = hsb[missing_rows])
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
writing.missing <-predict(g, newdata = hsb[hsb$閱讀 == -99, ])
writing.missing
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
writing.missing <-predict(g, newdata = hsb[hsb$寫作 == -99, ])
hsb <- read.csv("hsb.csv", fileEncoding = "UTF-16BE",sep=",", head = TRUE, skip = 1)
hsb.new <- filter(hsb, !(hsb$寫作 == -99))
# 請分別計算 hsb.new 資料表中男生與女生的各科平均，並且將其整理成一個 data.frame 指入 hsb.split 變數
hsb.new %>%
group_by(性別) %>%
summarise(閱讀平均 = mean(閱讀),
寫作平均 = mean(寫作),
數學平均 = mean(數學),
科學平均 = mean(科學),
社會科學平均 = mean(社會科學)) -> hsb.split
stopifnot(isTRUE(all.equal(colnames(hsb.split), c("性別","閱讀平均","寫作平均","數學平均","科學平均","社會科學平均"))))
# 其中我們發現男生與女生的寫作平均有顯著的差異，請以 ks.test 嘗試驗證男生與女生的寫作成績在分布上是否有顯著差異，並將答案指入 is.male_female_diff_in_writing 變數中，若有顯著差異答案為 TRUE 若沒有則為 FALSE
# 提示：以 ks.test 檢驗男生與女生的寫作成績，並檢查 p.value 是否小於 0.05
is.male_female_diff_in_writing <- TRUE
# 除去編號與分類別，請嘗試以 "性別"、"種族"、"學校類型"、"學程類型"、"閱讀"、"數學"、"科學"、"社會科學" 等項建立線性模型預測寫作成績，並將建立出來模型的 R.square 值，存入變數 R2 中
# 提示：以 lm 建立線性模型，字串類別的資料須先轉換成為 R 認可的類別型資料
# 提示： summary 建好的模型可以獲得 R.square 值，可用 str 指令觀察該如何取出
g <- lm(寫作~性別+種族+學校類型+學程類型+閱讀+數學+科學+社會科學, hsb.new)
R2 <- summary(g)$r.squared
# 嘗試以上面建立的線性模型，預測 hsb 資料中缺漏的若干筆閱讀成績是多少
# 提示：使用 predict 指令，利用題 5 建立的線性模型進行預測，詳細請參照 predict.lm 的 help
writing.missing <-predict(g, newdata = hsb[hsb$寫作 == -99, ])
setwd("~/Downloads/exercise3")
# 我們嘗試要計算不同產業的用電效率，此題目共有三個資料檔
# mapping.csv 中載明了不同產業類別的名稱，以及在 gdp 與 power 表單中分別的代碼
# gdp_industry.csv 中登載了不同產業類別及其子類別在不同年份的 gdp 數額
# power_industry.csv 中登載了不同產業類別及其子類別在不同年份的用電量
# 請分別將三張表單正確讀入，放置於 mapping、gdp_df、power_df 三個變數中
mapping <- read.csv("mapping.csv", fileEncoding = "UTF-8")
gdp_df <- read.csv("gdp_industry.csv", fileEncoding = "Big5", skip = 2)
stopifnot(isTRUE(all.equal(colnames(gdp_df), c("year", "industry_name", "gdp"))))
View
View(gdp_df)
gdp_df <- select(gdp_df, -3)
stopifnot(isTRUE(all.equal(colnames(gdp_df), c("year", "industry_name", "gdp"))))
gdp_df <- read.csv("gdp_industry.csv", fileEncoding = "Big5", skip = 2)
gdp_df <- select(gdp_df, -2)
stopifnot(isTRUE(all.equal(colnames(gdp_df), c("year", "industry_name", "gdp"))))
power_df <- read.csv("power_industry.csv", fileEncoding = "Big5")
stopifnot(isTRUE(all.equal(colnames(power_df), c("year", "industry_name", "power"))))
View(power_df)
power_df <- select(power_df, -1)
colnames(power_df) <- c("year", "industry_name", "power")
stopifnot(isTRUE(all.equal(colnames(power_df), c("year", "industry_name", "power"))))
View(mapping)
gdp_df <- read.csv("gdp_industry.csv", fileEncoding = "Big5", skip = 2)
gdp_df <- read.csv("gdp_industry.csv", fileEncoding = "Big5", skip = 2)
gdp_df <- select(gdp_df, -2)
power_df <- read.csv("power_industry.csv", fileEncoding = "Big5")
power_df <- select(power_df, -1)
gdp_power_year <- NULL
stopifnot(isTRUE(all.equal(colnames(power_df), c("year", "industry_name", "gdp", "power", "eff"))))
power_df <- read.csv("power_industry.csv", fileEncoding = "Big5")
