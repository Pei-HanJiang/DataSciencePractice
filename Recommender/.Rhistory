na.omit() %>%
filter(carrier == "AA") %>%
select(tailnum) %>%
summarise(all_aa = all(grepl("AA", tailnum, ignore.case = TRUE)))
library(dplyr)
library(nycflights13)
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
stopifnot(nrow(flights_AA_dplyr)==32645)
stopifnot(nrow(flights_AA_baseR)==32645)
stopifnot(nrow(flights_odd_rows_dplyr)==168388)
stopifnot(nrow(flights_odd_rows_baseR)==168388)
stopifnot(nrow(flights_selected_rows_baseR)==2002)
stopifnot(nrow(flights_sorted_dplyr)==336776)
stopifnot(nrow(flights_sorted_baseR)==336776)
stopifnot(earliest_arr_time==830)
stopifnot(all_AA_tailnums==TRUE)
stopifnot(average_delays$dep_delay[1]==139.838709677419)
stopifnot(average_delays$arr_delay[1]==129.5161290322581)
install.packages("dplyr")
vignette(package = "dplyr")
library(dplyr)
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
library(nycflights13)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights <- flights
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights <- flights
weather <- weather
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
#請各位同學撈出資料表中班機編號 (tailnum) 以 "AA" 開頭的班機資料
flights_AA_dplyr <- filter(flights, grepl("AA", tailnum))
flights_AA_baseR <- flights[grepl("AA", flights$tailnum),]
# 請練習以 dplyr 語法以及 baseR 語法取出 flights 資料表中奇數列的資料
flights_odd_rows_dplyr <- slice(flights, seq(1, nrow(flights), 2))
flights_odd_rows_baseR <- flights[seq(1,nrow(flights),2),]
# 請練習以 dplyr 語法以集 baseR 語法取出 flights 資料表中 1000 到 2000 列 以及 2500 到 3500 列的資料
flights_selected_rows_baseR <- slice(flights, 1000:2000, 2500:3500)
# # 請參閱 arrange 與 order 的 help，試著由大至小進行排序
# 使用 dplyr
flights_sorted_dplyr <- arrange(flights, desc(month), desc(day), desc(dep_time))
# 使用 base R
flights_sorted_baseR <- with(flights, flights[order(desc(month), desc(day), desc(dep_time)),])
# 上述資料中第一列的 dep_time 為 517
# 代表了 1 月 1 日 當天最早的班機是 5:17 起飛的
# 那麼整個紀錄中起飛時刻最早是幾點呢？
earliest_arr_time <- flights$arr_time[min(flights$arr_time, na.rm = TRUE)]
# 以 %>% 指令改寫 group_by, summarise 流程會十分簡單
# 這邊我們做一個練習，請問美國航空公司 (carrier == "AA")，其班機尾標是否都有 AA 字眼，去掉 na
all_AA_tailnums <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
select(tailnum) %>%
summarise(all_aa = all(grepl("AA", tailnum, ignore.case = TRUE)))
library(dplyr)
library(nycflights13)
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
nrow(flights_first_half_dplyr)
install.packages("dplyr")
vignette(package = "dplyr")
vignette("introduction", package = "dplyr")
library(dplyr)
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
library(nycflights13)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights <- flights
weather <- weather
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
flights_first_half_dplyr <- filter(flights, month >= 1, month <= 6)
#請各位同學撈出資料表中班機編號 (tailnum) 以 "AA" 開頭的班機資料
flights_AA_dplyr <- filter(flights, grepl("AA", tailnum))
flights_AA_baseR <- flights[grepl("AA", flights$tailnum),]
# 請練習以 dplyr 語法以及 baseR 語法取出 flights 資料表中奇數列的資料
flights_odd_rows_dplyr <- slice(flights, seq(1, nrow(flights), 2))
flights_odd_rows_baseR <- flights[seq(1,nrow(flights),2),]
# 請練習以 dplyr 語法以集 baseR 語法取出 flights 資料表中 1000 到 2000 列 以及 2500 到 3500 列的資料
flights_selected_rows_baseR <- slice(flights, 1000:2000, 2500:3500)
# # 請參閱 arrange 與 order 的 help，試著由大至小進行排序
# 使用 dplyr
flights_sorted_dplyr <- arrange(flights, desc(month), desc(day), desc(dep_time))
# 使用 base R
flights_sorted_baseR <- with(flights, flights[order(desc(month), desc(day), desc(dep_time)),])
# 上述資料中第一列的 dep_time 為 517
# 代表了 1 月 1 日 當天最早的班機是 5:17 起飛的
# 那麼整個紀錄中起飛時刻最早是幾點呢？
earliest_arr_time <- flights$arr_time[min(flights$arr_time, na.rm = TRUE)]
# 以 %>% 指令改寫 group_by, summarise 流程會十分簡單
# 這邊我們做一個練習，請問美國航空公司 (carrier == "AA")，其班機尾標是否都有 AA 字眼，去掉 na
all_AA_tailnums <- flights %>%
na.omit() %>%
filter(carrier == "AA") %>%
select(tailnum) %>%
summarise(all_aa = all(grepl("AA", tailnum, ignore.case = TRUE)))
library(dplyr)
library(nycflights13)
flights <- flights %>%
na.omit() %>%
mutate(dep_time_group = cut(dep_time, breaks = c(0, 559, 1159, 1759, 2359)))
# 計算平均起飛和降落遲延
average_delays <- flights %>%
group_by(dep_time_group) %>%
summarize(dep_delay = mean(dep_delay), arr_delay = mean(arr_delay))
stopifnot(nrow(flights_first_half_dplyr)==166158)
stopifnot(nrow(flights_first_half_baseR)==166158)
stopifnot(nrow(flights_AA_dplyr)==32645)
stopifnot(nrow(flights_AA_baseR)==32645)
stopifnot(nrow(flights_odd_rows_dplyr)==168388)
nrow(flights_first_half_dplyr)
# 請各位以 dplyr 以及 baseR 語法進行下列練習
# 1.取出當年上半年度 (1 月 ~ 6 月的資料)
flights <- flights
weather <- weather
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
nrow(flights_first_half_baseR)
install.packages("dplyr")
install.packages("dplyr")
vignette(package = "dplyr")
vignette("introduction", package = "dplyr")
library(dplyr)
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
library(nycflights13)
flights_first_half_baseR <- flights[flights$month >= 1 & flights$month <= 6,]
nrow(flights_first_half_dplyr)
nrow(flights)
nrow(flights[flights$month >= 1 & flights$month <= 6])
flights[flights$month >= 1 & flights$month <= 6]
nrow(flights[flights$month >= 1 & flights$month <= 6, ])
range(flights$month[flights$month >= 1 & flights$month <= 6, ])
range(flights[flights$month >= 1 & flights$month <= 6, ])
test <- flights[flights$month >= 1 & flights$month <= 6, ]
range(test$month)
install.packages("dplyr")
# vignette(package = "dplyr")
# vignette("introduction", package = "dplyr")
# 各位同學可以嘗試閱讀 dplyr 套件的文件，了解其源流與用法
library(dplyr)
# 我們將使用紐約機場起降的飛機資料來進行練習
install.packages("nycflights13")
library(nycflights13)
delay_info <-
# 延伸練習：
# 假如風速希望可以分成十級，應該如何進行呢？.
# 假如出發機場的風速對於出發延遲的影響，應該如何進行呢？
# 第一步：結合 weather 和 flights 數據表，並保留必要的欄位
delay_info <- flights %>%
# 第二步：將風速分為十個等級
delay_info <- delay_info %>%
# 第三步：分析每個風速等級對應的平均出發延遲時間
average_delay_by_wind_speed <- delay_info %>%
stopifnot(nrow(delay_info) == 326915)
View(wind_speed)
View(weather)
?inner_join
delay_info <- inner_join(weather, flights) %>%
select(wind_speed, arr_delay) %>%
filter(!is.na(wind_speed), !is.na(arr_delay))
View(delay_info)
delay_info <- inner_join(weather, flights)
View(flights)
rownames(flights)
rownames(flights)
colnames(flights)
colnames(weather)
delay_info <- inner_join(weather, flights)
colnames(delay_info)
delay_info <- inner_join(weather, flights) %>%
select(wind_speed, arr_delay) %>%
filter(!is.na(wind_speed), !is.na(arr_delay))
# 第一步：結合 weather 和 flights 數據表，並保留必要的欄位
delay_info <- flights %>%
# 第二步：將風速分為十個等級
delay_info <- delay_info %>%
# 第三步：分析每個風速等級對應的平均出發延遲時間
average_delay_by_wind_speed <- delay_info %>%
stopifnot(nrow(delay_info) == 326915)
nrow(delay_info)
# 第一步：結合 weather 和 flights 數據表，並保留必要的欄位
delay_info <- flights %>%
# 第二步：將風速分為十個等級
delay_info <- delay_info %>%
breakss <- quantile(delay_info$wind_speed, probs = seq(0,1, length.out = 11))
breakss <- quantile(delay_info$wind_speed, probs = seq(0,1, length.out = 11))
cut(delay_info$wind_speed, breaks = breakss)
delay_info <- mutate(delay_info, wind_level10 = cut(delay_info$wind_speed, breaks = breakss))
# 第三步：分析每個風速等級對應的平均出發延遲時間
average_delay_by_wind_speed <- delay_info %>%
group_by(wind_level10) %>%
summarize(avg_dep_delay = mean(arr_delay))
stopifnot(nrow(delay_info) == 326915)
stopifnot(nrow(average_delay_by_wind_speed) == 10)3
stopifnot(as.integer(average_delay_by_wind_speed$avg_dep_delay[1]) == 10)
average_delay_by_wind_speed[1]
seq(0,1, length.out = 11)
nrow(average_delay_by_wind_speed)
breakss <- quantile(delay_info$wind_speed, probs = seq(0,1, length.out = 11))
breakss
cut(delay_info$wind_speed, breaks = breakss)
delay_info <- mutate(delay_info, wind_level10 = cut(delay_info$wind_speed, breaks = breakss))
# 第三步：分析每個風速等級對應的平均出發延遲時間
average_delay_by_wind_speed <- delay_info %>%
group_by(wind_level10) %>%
summarize(avg_dep_delay = mean(arr_delay))
as.integer(average_delay_by_wind_speed$avg_dep_delay[1])
hw2_function <- function() {
#' 給定一個矩陣X，
X <- cbind(x1 = 1, x2 = 1:10, x3 = sin(1:10))
X
#' 以及一個長度為3 的向量 beta。
beta <- c(0.5, -1, 4.3)
#' 我們稱`X[,1] 為x1, X[,2] 為x2, X[,3] 為 x3
#' 向量y 的值是 x1 * beta[1] + x2 * beta[2] + x3 * beta[3]，
#' 請用矩陣乘法`%*%`算出向量y。
#' dim(y) 應該是 c(10, 1)
# 1. 計算 y
ori_y <- X %*% beta
ori_y
#' epsilon 是一個隨機產生的雜訊向量，
epsilon <- c(-1.24462014500259, 0.146172987456978, 1.56426869006839, -0.856920339050681,
-1.15277300953772, 0.717919832604741, -0.270623615316431, -1.66281578024014,
-1.15557078461633, -0.730253254897595)
#' 我們讓y 參雜了雜訊。
y <- ori_y + epsilon
y
# 2. 根據公式算出 beta.hat 的估計值
beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
beta.hat
# 計算與比較差異
x_difference <- beta.hat - beta
x_difference
# 3. 引入 CO2 資料表的資料
X <- model.matrix(~ Type + Treatment + conc, CO2)
X
#' 如此就建立了一個基於 Type、Treatment 和 conc 的矩陣
#' 我們以 uptake 的值放入 y 之中，作為迴歸的目標
y <- CO2$uptake
y
# 4. 根據公式算出 co2_beta.hat 的估計值
co2_beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
co2_beta.hat
y.hat <- X %*% co2_beta.hat
y.hat
# 5. 計算 correlation
my.corr <- cor(X %*% co2_beta.hat, y)
my.corr
# 6. 用 lm() 函數進行線性迴歸
g <- lm(uptake ~ Type + Treatment + conc, CO2)
g.s <- summary(g)
g.s$r.squared
#' mode(g.s)顯示它是一個list。
#' 請取出上述線性迴歸的 R-squared 數值，並且與 my.corr 的平方做比較
# 提取 g.s 中的 R-squared 值
R_squared_lm <- g.s$r.squared
R_squared_lm
# 計算 my.corr^2 的值
R_squared_calculated <- drop(my.corr^2)
R_squared_calculated
# 比較兩者 提示可以使用 identical() 函數，然後取相同的 round ，例如 round(x, 10)
decimal_places <- 10
x_rounded <- round(R_squared_lm, decimal_places)
y_rounded <- round(R_squared_calculated, decimal_places)
comparison <- identical(x_rounded, y_rounded)
comparison
# 使用 cars 資料表為例
# 引入 cars 資料集
data(cars)
# 建立設計矩陣 X (這邊只有截距和 speed)
# 將 dist 設為目標變數 y
# 利用最小平方法的公式計算 beta 的估計值
# 使用估計的 beta 值來計算 y 的估計值
#手刻
X <- cars$speed
y <- cars$dist
beta <- (solve(t(X) %*% X)) %*% t(X) %*% y
X %*% beta
#' 這邊我們可以計算X %*% beta.hat 和 y 的correlation（提示：用函數`cor`）
# 計算 y 的估計值和實際 y 值之間的相關性
my.corr_cars <- cor(X %*% beta, y)
my.corr_cars
# 使用 R 的內建 lm() 函數進行線性回歸
g_cars <- lm(dist ~ speed, cars)
# 從 lm() 的結果中提取 R-squared
g_cars2 <- summary(g_cars)
R_squared_lm_cars <- g_cars2$r.squared
# 確認手動計算的 R-squared (即 my.corr_cars^2) 是否與 lm() 函數的結果相符
decimal_places <- 10
x_rounded <- round(R_squared_lm_cars[1], decimal_places)
y_rounded <- round(my.corr_cars^2, decimal_places)
is_identical <- identical(x_rounded, y_rounded)
is_identical
ans = list(
ori_y = ori_y,
beta_hat =  beta.hat,
x_difference = x_difference,
R_squared_lm = R_squared_lm,
R_squared_calculated = R_squared_calculated,
comparison = comparison,
my_corr_cars = my.corr_cars,
R_squared_lm_cars = R_squared_lm_cars,
mean_total_length_per_species = is_identical
)
}
#' 給定一個矩陣X，
X <- cbind(x1 = 1, x2 = 1:10, x3 = sin(1:10))
X
#' 以及一個長度為3 的向量 beta。
beta <- c(0.5, -1, 4.3)
# 1. 計算 y
ori_y <- X %*% beta
ori_y
#' epsilon 是一個隨機產生的雜訊向量，
epsilon <- c(-1.24462014500259, 0.146172987456978, 1.56426869006839, -0.856920339050681,
-1.15277300953772, 0.717919832604741, -0.270623615316431, -1.66281578024014,
-1.15557078461633, -0.730253254897595)
#' 我們讓y 參雜了雜訊。
y <- ori_y + epsilon
y
# 2. 根據公式算出 beta.hat 的估計值
beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
beta.hat
# 計算與比較差異
x_difference <- beta.hat - beta
x_difference
# 3. 引入 CO2 資料表的資料
X <- model.matrix(~ Type + Treatment + conc, CO2)
X
#' 我們以 uptake 的值放入 y 之中，作為迴歸的目標
y <- CO2$uptake
y
co2_beta.hat <- (solve(t(X) %*% X)) %*% t(X) %*% y
co2_beta.hat
y.hat <- X %*% co2_beta.hat
y.hat
# 5. 計算 correlation
my.corr <- cor(X %*% co2_beta.hat, y)
my.corr
# 6. 用 lm() 函數進行線性迴歸
g <- lm(uptake ~ Type + Treatment + conc, CO2)
g.s <- summary(g)
g.s$r.squared
# 提取 g.s 中的 R-squared 值
R_squared_lm <- g.s$r.squared
R_squared_lm
# 計算 my.corr^2 的值
R_squared_calculated <- drop(my.corr^2)
R_squared_calculated
R_squared_calculated
R_squared_lm
setwd("/Users/peihanjiang/Desktop/資料科學實務/Recommender")
read.csv("ml-100k/u.data")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("lsa")
library("Hmisc")
install.packages("Hmisc")
library(dplyr)
library(tidyr)
library(lsa)
library(Hmisc)
read.csv("ml-100k/u.data")
read.csv("ml-100k/u.data", header = FALSE, sep ="\t")
u.data <- read.csv("ml-100k/u.data", header = FALSE, sep ="\t")
u.item <- read.csv("ml-100k/u.item", header = FALSE, sep ="\t")
View(u.item)
u.item <- read.csv("ml-100k/u.item", header = FALSE, sep ="|")
movie <- read.csv("ml-100k/u.item", header = FALSE, sep ="|")
View(movie)
rating <- read.csv("ml-100k/u.data", header = FALSE)
View(rating)
rating <- read.csv("ml-100k/u.data", header = FALSE, sep = " ")
rating <- read.csv("ml-100k/u.data")
movie <- read.csv("ml-100k/u.item", header = FALSE, sep ="|")
rating <- read.csv("ml-100k/u.data", header = FALSE, sep = "\t")
colnames(rating) = c("user id", "item id", "rating", "timestamp")
colnames(movie) = c("movie id", "movie title", "release date", "video release date",
"IMDb URL", "unknown", "Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime", "Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
colnames(rating) = c("user id", "item id", "rating", "timestamp")
colnames(rating) = c("user id", "item id", "rating", "timestamp")
left_join(movie, rating)
left_join(rating, movie, "item id" = "movie id")
?left_join
colnames(rating) = c("user id", "movie id", "rating", "timestamp")
left_join(rating, movie)
temp<-left_join(rating, movie)
View(temp)
info <-left_join(rating, movie)
View(info)
info[, -7]
select(info, -7)
select(info, -"video release date")
select(info, -video release date)
info <- info[, -7]
movie <- read.csv("ml-100k/u.item", header = FALSE, sep ="|")
rating <- read.csv("ml-100k/u.data", header = FALSE, sep = "\t")
colnames(movie) = c("movie id", "movie title", "release date", "video release date",
"IMDb URL", "unknown", "Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime", "Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
colnames(rating) = c("user id", "movie id", "rating", "timestamp")
info <-left_join(rating, movie)
info <- info[, -7:-8]
pivot_wider(
info,
id_cols = user id
pivot_wider(
info,
id_cols = "user id"
)
pivot_wider(
info,
id_cols = "user id"
)
pivot_wider()
?pivot_wider
pivot_wider(info, id_cols = "user id")
pivot_wider(info, id_cols = user id)
pivot_wider(info, id_cols = user id)
pivot_wider(info, id_cols = "user id")
temp <- filter(info, user id == 13)
temp <- filter(info, "user id" == 13)
colnames(movie) = c("movie_id", "movie_title", "release_date", "video_release_date",
"IMDb_URL", "unknown", "Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime", "Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
colnames(rating) = c("user_id", "movie_id", "rating", "timestamp")
info <-left_join(rating, movie)
info <- info[, -7:-8]
temp <- filter(info, user_id == 13)
View(user_id)
View(temp)
info %>% pivot_wider(names_from = "user_id", values_from = "rating")
info <- pivot_wider(names_from = "user_id", values_from = "rating")
info %>%
pivot_wider(names_from = "user_id", values_from = "rating") -> info2
View(info2)
View(info2)
info2[, -2]
info2[, -2] -> info2
info2[, -3] -> info2
info %>%
pivot_wider(id_cols = "user_id", values_from = "rating") -> info2
movie <- read.csv("ml-100k/u.item", header = FALSE, sep ="|")
rating <- read.csv("ml-100k/u.data", header = FALSE, sep = "\t")
colnames(movie) = c("movie_id", "movie_title", "release_date", "video_release_date",
"IMDb_URL", "unknown", "Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime", "Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
colnames(rating) = c("user_id", "movie_id", "rating", "timestamp")
info <-left_join(rating, movie)
info <- info[, -7:-8]
info %>%
pivot_wider(id_cols = "user_id", values_from = "rating") -> info2
colnames(rating) = c("user_id", "movie_id", "rating", "timestamp")
info <-left_join(rating, movie)
info <- info[, -7:-8]
info %>%
pivot_wider(names_cols = "movie_id", values_from = "rating") -> info2
colnames(rating) = c("user_id", "movie_id", "rating", "timestamp")
info <-left_join(rating, movie)
info <- info[, -7:-8]
info %>%
pivot_wider(names_cols = "movie_id", values_from = "rating") -> info2
temp <- pivot_wider(info[,1:3], names_from = user_id, values_from = rating)
temp <- pivot_wider(info[,1:3], names_from = user_id, values_from = rating)
View(temp)
jaccard <- function(a, b) {
intersection = length(intersect(a, b))
union = length(a) + length(b) - intersection
return (intersection/union)
}
temp <- pivot_wider(info[,1:3], names_from = movie_id, values_from = rating)
#user-id as index, movie_id as colnumns
temp <- pivot_wider(info[,1:3], names_from = movie_id, values_from = rating)
#user-id as index, movie_id as colnumns
temp <- pivot_wider(info[,1:3], names_from = movie_id, values_from = rating) %>% sort()
?sort
#user-id as index, movie_id as colnumns
temp <- pivot_wider(info[,1:3], names_from = movie_id, values_from = rating) %>% sort(user_id)
#user-id as index, movie_id as colnumns
userToitem<- pivot_wider(info[,1:3], names_from = movie_id, values_from = rating)
View(userToitem)
#calculate the correlation between itemToitem and userTouser
item2item <- rcorr(userToitem)$r
